// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

import "./chainlink/AggregatorV3Interface.sol";
import "./chainlink/KeeperCompatibleInterface.sol";

interface IRouter {
  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IWETH {
  function balanceOf(address) external view returns(uint);
}

contract UniswapLinkStrategy is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public previousLD;
    uint public previousPrice;
    address public poolAddress;

    IRouter public router;
    IWETH public WETH;
    address[] public path;



    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;


    constructor(
        uint updateInterval,
        address _router,
        address _poolAddress,
        IWETH _WETH,
        address[] memory _path
      )
      public
    {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;

      router = IRouter(_router);
      poolAddress = _poolAddress;
      WETH = IWETH(_WETH);
      path = _path;

      previousPrice = getUNIPriceInETH();
      previousLD =  getUNILDInWETH();
    }

    function getUNIPriceInETH()
      public
      view
      returns (uint256)
    {
      uint256[] memory res = router.getAmountsOut(1000000000000000000, path);
      return res[1];
    }

    function getUNILDInWETH()
      public
      view
      returns (uint256)
    {
      return WETH.balanceOf(poolAddress);
    }

    function checkUpkeep(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        lastTimeStamp = block.timestamp;
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}
